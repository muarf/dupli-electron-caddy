name: Test Linux Build

on:
  push:
    branches: [ main, master, fix-linux-appimage ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-test-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    
    steps:
      - name: Free up disk space on GitHub Actions runner
        run: |
          echo "=== Espace disque AVANT nettoyage ==="
          df -h /
          echo ""
          echo "Suppression de fichiers inutiles du runner GitHub Actions..."
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune -af || true
          sudo apt-get clean || true
          echo ""
          echo "=== Espace disque APR√àS nettoyage ==="
          df -h /
      
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # R√©cup√©rer tout l'historique et les tags pour le versioning
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-0 \
            libnotify4 \
            libnss3 \
            libxss1 \
            libxtst6 \
            xvfb \
            libatspi2.0-0 \
            libdrm2 \
            libgbm1 \
            libxcb-dri3-0
      
      - name: Install dependencies
        run: npm install
        
      - name: Verify system PHP
        run: |
          echo "V√©rification de PHP syst√®me..."
          which php
          php --version
          echo "Extensions PHP disponibles:"
          php -m | grep -E "(gd|sqlite3|mbstring|xml)"
        
      # Tests temporairement d√©sactiv√©s (probl√®me Jest sur GitHub Actions)
      # - name: Run tests
      #   run: npm run test:e2e:simple
        
      - name: Cleanup unnecessary files to save disk space
        run: |
          echo "=== Nettoyage agressif pour lib√©rer de l'espace ==="
          df -h / | grep "/"
          
          echo ""
          echo "Suppression du cache npm..."
          npm cache clean --force
          
          echo "Vider le dossier php/..."
          if [ -d "php/" ]; then
            echo "Taille php/: $(du -sh php/ | cut -f1)"
            rm -rf php/*
          fi
          mkdir -p php/
          
          echo "Nettoyage des fichiers temporaires de l'application..."
          rm -rf app/public/tmp/* || true
          rm -rf app/public/sauvegarde/* || true
          rm -rf app/tmp/* || true
          echo "Fichiers temporaires supprim√©s"
          
          echo "Nettoyage du cache electron-builder..."
          rm -rf ~/.cache/electron-builder || true
          
          echo "Nettoyage node_modules/.cache..."
          rm -rf node_modules/.cache || true
          
          echo ""
          echo "=== Espace lib√©r√© ==="
          df -h / | grep "/"
        
      - name: Update package.json version
        run: |
          echo "=== Mise √† jour de la version dans package.json ==="
          
          # Calculer la nouvelle version depuis Git tags
          echo "Recherche du dernier tag..."
          LAST_TAG=$(git tag --list "v*" --sort=-version:refname | head -1)
          
          if [ -n "$LAST_TAG" ]; then
            echo "Dernier tag trouv√©: $LAST_TAG"
            
            # Extraire la version sans le 'v' et incr√©menter
            CURRENT_VERSION=$(echo "$LAST_TAG" | sed 's/^v//')
            echo "Version actuelle: $CURRENT_VERSION"
            
            # Diviser la version et incr√©menter le patch
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            if [ ${#VERSION_PARTS[@]} -eq 3 ]; then
              PATCH_NUMBER=$((VERSION_PARTS[2] + 1))
              NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH_NUMBER"
              echo "Nouvelle version calcul√©e: $NEW_VERSION"
              
              # Modifier package.json avec jq
              echo "Mise √† jour package.json..."
              npm pkg set version="$NEW_VERSION"
              
              echo "‚úÖ package.json mis √† jour avec version: $NEW_VERSION"
              echo "Nouveau contenu package.json version:"
              node -p "require('./package.json').version"
              
            else
              echo "‚ö†Ô∏è Format de version inattendu: $CURRENT_VERSION"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è Aucun tag Git trouv√©, garder la version actuelle"
            echo "Version actuelle:" 
            node -p "require('./package.json').version"
          fi
        
      - name: Pre-build check
        run: |
          echo "=== V√©rifications avant build ==="
          echo "Espace disque:"
          df -h /
          echo ""
          echo "Nettoyage du r√©pertoire temporaire..."
          sudo find /tmp -name "t-*" -type d -exec rm -rf {} + 2>/dev/null || true
          echo "‚úÖ R√©pertoire temporaire nettoy√©"
          echo ""
          echo "Dossiers pr√©sents:"
          ls -la
          echo ""
          echo "Fichiers dans caddy/:"
          ls -la caddy/ || echo "‚ùå Pas de dossier caddy/"
          echo ""
          echo "Fichiers dans app/:"
          ls -la app/ | head -20 || echo "‚ùå Pas de dossier app/"
          echo ""
          echo "Dossier php/ existe?"
          ls -la php/ 2>&1 | head -5 || echo "‚úÖ php/ n'existe pas (normal pour Linux)"
        
      - name: Build Linux AppImage
        run: npm run build:caddy -- --publish=always
        
      - name: Verify AppImage
        run: |
          echo "=== V√©rification de l'AppImage ==="
          VERSION=$(node -p "require('./package.json').version")
          APPIMAGE_FILE="dist/Duplicator-${VERSION}.AppImage"
          echo "Version: $VERSION"
          echo "Fichier attendu: $APPIMAGE_FILE"
          
          if [ -f "$APPIMAGE_FILE" ]; then
            echo "‚úÖ AppImage cr√©√©"
            ls -lh "$APPIMAGE_FILE"
            chmod +x "$APPIMAGE_FILE"
            echo "üìä Taille de l'AppImage: $(du -h "$APPIMAGE_FILE" | cut -f1)"
            echo "üîç Type de fichier: $(file "$APPIMAGE_FILE")"
          else
            echo "‚ùå AppImage manquant"
            echo "Fichiers disponibles dans dist/:"
            ls -la dist/
            exit 1
          fi
        
      - name: Extract and verify AppImage contents
        run: |
          echo "=== Extraction de l'AppImage ==="
          VERSION=$(node -p "require('./package.json').version")
          APPIMAGE_FILE="dist/Duplicator-${VERSION}.AppImage"
          ./"$APPIMAGE_FILE" --appimage-extract
          
          echo "V√©rification du contenu..."
          if [ -f "squashfs-root/resources/app.asar.unpacked/caddy/caddy" ]; then
            echo "‚úÖ Caddy pr√©sent"
            squashfs-root/resources/app.asar.unpacked/caddy/caddy version
          else
            echo "‚ùå Caddy manquant"
            exit 1
          fi
          
          # PHP n'est plus inclus dans l'AppImage Linux - on utilise PHP syst√®me
          if [ -f "squashfs-root/resources/app.asar.unpacked/php/php" ]; then
            echo "‚ö†Ô∏è PHP pr√©sent dans l'AppImage (ne devrait pas √™tre l√† pour Linux)"
          else
            echo "‚úÖ PHP non inclus (utilisation du PHP syst√®me)"
          fi
          
          # V√©rifier que la page d'aide PHP est incluse
          if [ -f "squashfs-root/resources/app.asar.unpacked/php-install-guide.html" ]; then
            echo "‚úÖ Page d'aide PHP pr√©sente"
          else
            echo "‚ùå Page d'aide PHP manquante"
            exit 1
          fi
          
          if [ -f "squashfs-root/resources/app.asar.unpacked/Caddyfile" ]; then
            echo "‚úÖ Caddyfile pr√©sent"
          else
            echo "‚ùå Caddyfile manquant"
            exit 1
          fi
        
      - name: Test Caddy configuration
        run: |
          echo "=== Test de la configuration Caddy ==="
          echo "üîç Recherche du binaire Caddy..."
          find squashfs-root -name "caddy" -type f 2>/dev/null || echo "Binaire caddy non trouv√©"
          find squashfs-root -name "caddy.exe" -type f 2>/dev/null || echo "Binaire caddy.exe non trouv√©"
          
          echo "üîç Recherche du Caddyfile..."
          find squashfs-root -name "Caddyfile" -type f 2>/dev/null || echo "Caddyfile non trouv√©"
          
          echo "üìÅ Structure du dossier resources:"
          ls -la squashfs-root/resources/ 2>/dev/null || echo "Dossier resources non trouv√©"
          
          echo "üìÅ Structure du dossier app.asar.unpacked:"
          ls -la squashfs-root/resources/app.asar.unpacked/ 2>/dev/null || echo "Dossier app.asar.unpacked non trouv√©"
          
          echo "üìÅ Contenu du dossier caddy:"
          ls -la squashfs-root/resources/app.asar.unpacked/caddy/ 2>/dev/null || echo "Dossier caddy non trouv√©"
          
          echo "üîç V√©rification des permissions du binaire Caddy:"
          if [ -f "squashfs-root/resources/app.asar.unpacked/caddy/caddy" ]; then
            ls -la squashfs-root/resources/app.asar.unpacked/caddy/caddy
            echo "Test d'ex√©cution du binaire Caddy:"
            squashfs-root/resources/app.asar.unpacked/caddy/caddy version 2>&1 || echo "Erreur d'ex√©cution du binaire Caddy"
          else
            echo "‚ùå Binaire Caddy non trouv√©"
          fi
          
          # Test de validation si les fichiers existent
          if [ -f "squashfs-root/resources/app.asar.unpacked/caddy/caddy" ] && [ -f "squashfs-root/resources/Caddyfile" ]; then
            echo "‚úÖ Validation de la configuration Caddy..."
            squashfs-root/resources/app.asar.unpacked/caddy/caddy validate --config squashfs-root/resources/Caddyfile
          else
            echo "‚ö†Ô∏è  Impossible de valider la configuration Caddy (fichiers manquants)"
          fi
        
      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: duplicator-linux-appimage
          path: dist/Duplicator-*.AppImage
          retention-days: 7
        
      - name: Test summary
        if: always()
        run: |
          echo ""
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "‚úÖ TEST LINUX TERMIN√â"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo ""
          echo "L'AppImage est disponible dans les artifacts"

