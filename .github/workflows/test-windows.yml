name: Test Windows Build

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Permet de lancer manuellement

jobs:
  build-and-test-windows:
    runs-on: windows-latest
    timeout-minutes: 30
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # R√©cup√©rer tout l'historique et les tags pour le versioning
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
        
      - name: Download Caddy for Windows
        run: |
          echo "T√©l√©chargement de Caddy pour Windows..."
          Invoke-WebRequest -Uri "https://github.com/caddyserver/caddy/releases/download/v2.7.6/caddy_2.7.6_windows_amd64.zip" -OutFile "caddy_windows.zip"
          Expand-Archive -Path "caddy_windows.zip" -DestinationPath "caddy" -Force
          Remove-Item "caddy_windows.zip"
          echo "Caddy t√©l√©charg√©: $(Get-Item caddy/caddy.exe | Select-Object -ExpandProperty Length) bytes"
        
      - name: Verify PHP binaries
        run: |
          echo "V√©rification des binaires PHP inclus..."
          
          if (Test-Path "php/php.exe") {
            echo "‚úÖ php.exe trouv√©"
            & "php/php.exe" --version
            echo "Taille: $((Get-Item 'php/php.exe').Length) bytes"
          } else {
            echo "‚ùå php.exe manquant dans le repo"
            echo "Contenu du dossier php/:"
            if (Test-Path "php") {
              dir php/
            } else {
              echo "Dossier php/ n'existe pas"
            }
            exit 1
          }
          
          echo "V√©rification des DLL n√©cessaires:"
          $required_dlls = @("php8.dll", "libsqlite3.dll", "vcruntime140.dll", "msvcp140.dll")
          foreach ($dll in $required_dlls) {
            if (Test-Path "php/$dll") {
              echo "‚úÖ $dll trouv√©"
            } else {
              echo "‚ùå $dll manquant (CRITIQUE pour Windows)"
            }
          }
        
      - name: Update package.json version
        run: |
          echo "=== Mise √† jour de la version dans package.json ==="
          
          # Calculer la nouvelle version depuis Git tags
          echo "Recherche du dernier tag..."
          $lastTag = git tag --list "v*" --sort=-version:refname | Select-Object -First 1
          
          if ($lastTag) {
            echo "Dernier tag trouv√©: $lastTag"
            
            # Extraire la version sans le 'v' et incr√©menter
            $currentVersion = $lastTag -replace '^v', ''
            $versionParts = $currentVersion -split '\.'
            
            if ($versionParts.Length -eq 3) {
              $patchNumber = [int]$versionParts[2] + 1
              $newVersion = "$($versionParts[0]).$($versionParts[1]).$patchNumber"
              echo "Nouvelle version calcul√©e: $newVersion"
              
              # Modifier package.json
              echo "Mise √† jour package.json..."
              $packageJson = Get-Content "package.json" | ConvertFrom-Json
              $packageJson.version = $newVersion
              $packageJson | ConvertTo-Json -Depth 100 | Set-Content "package.json"
              
              echo "‚úÖ package.json mis √† jour avec version: $newVersion"
              echo "Nouveau contenu package.json version:"
              (Get-Content "package.json" | ConvertFrom-Json).version
              
            } else {
              echo "‚ö†Ô∏è Format de version inattendu: $currentVersion"
              exit 1
            }
          } else {
            echo "‚ö†Ô∏è Aucun tag Git trouv√©, garder la version actuelle"
            echo "Version actuelle:" 
            (Get-Content "package.json" | ConvertFrom-Json).version
          }
        
      - name: Build Windows app
        run: npm run build:caddy -- --win --publish=always
        
      - name: Verify build output
        run: |
          echo "=== V√©rification du build ==="
          if (Test-Path "dist/win-unpacked/Duplicator.exe") {
            echo "‚úÖ Duplicator.exe existe"
            $size = (Get-Item "dist/win-unpacked/Duplicator.exe").Length / 1MB
            echo "   Taille: $([math]::Round($size, 2)) MB"
          } else {
            echo "‚ùå Duplicator.exe manquant"
            exit 1
          }
          
          if (Test-Path "dist/win-unpacked/resources/app.asar.unpacked/caddy/caddy.exe") {
            echo "‚úÖ caddy.exe existe"
          } else {
            echo "‚ùå caddy.exe manquant"
          }
          
          if (Test-Path "dist/win-unpacked/resources/app.asar.unpacked/php/php.exe") {
            echo "‚úÖ php.exe existe"
          } else {
            echo "‚ùå php.exe manquant"
          }
          
          if (Test-Path "dist/win-unpacked/resources/Caddyfile") {
            echo "‚úÖ Caddyfile existe"
          } else {
            echo "‚ùå Caddyfile manquant"
          }
          
          echo ""
          echo "=== Structure compl√®te ==="
          tree dist/win-unpacked/resources/ -L 2
        
      - name: Test Caddy binary
        run: |
          echo "=== Test de Caddy ==="
          & "dist/win-unpacked/resources/app.asar.unpacked/caddy/caddy.exe" version
        
      - name: Test PHP binary
        run: |
          echo "=== Test de PHP ==="
          & "dist/win-unpacked/resources/app.asar.unpacked/php/php.exe" --version
        
      - name: Test Caddyfile validation
        run: |
          echo "=== Validation du Caddyfile ==="
          echo "üîç V√©rification des binaires..."
          
          if (Test-Path "dist/win-unpacked/resources/app.asar.unpacked/caddy/caddy.exe") {
            echo "‚úÖ Caddy Windows pr√©sent"
            Get-Item "dist/win-unpacked/resources/app.asar.unpacked/caddy/caddy.exe" | Select-Object Name, Length
          } else {
            echo "‚ùå Caddy Windows manquant"
            echo "Contenu du dossier caddy:"
            Get-ChildItem "dist/win-unpacked/resources/app.asar.unpacked/caddy/" -ErrorAction SilentlyContinue
          }
          
          if (Test-Path "dist/win-unpacked/resources/app.asar.unpacked/Caddyfile") {
            echo "‚úÖ Caddyfile pr√©sent"
            Get-Content "dist/win-unpacked/resources/app.asar.unpacked/Caddyfile"
          } else {
            echo "‚ùå Caddyfile manquant"
          }
          
          # Test de validation si les fichiers existent
          $caddyExists = Test-Path "dist/win-unpacked/resources/app.asar.unpacked/caddy/caddy.exe"
          $caddyfileExists = Test-Path "dist/win-unpacked/resources/app.asar.unpacked/Caddyfile"
          
          if ($caddyExists -and $caddyfileExists) {
            echo "üîß Validation de la configuration Caddy..."
            & "dist/win-unpacked/resources/app.asar.unpacked/caddy/caddy.exe" validate --config "dist/win-unpacked/resources/app.asar.unpacked/Caddyfile"
          } else {
            echo "‚ö†Ô∏è  Impossible de valider la configuration Caddy (fichiers manquants)"
            echo "Caddy existe: $caddyExists"
            echo "Caddyfile existe: $caddyfileExists"
          }
        
      - name: Test application launch (short)
        run: |
          echo "=== Test de d√©marrage de l'application ==="
          $app = Start-Process "dist/win-unpacked/Duplicator.exe" -PassThru
          echo "Application d√©marr√©e avec PID: $($app.Id)"
          
          # Attendre 15 secondes pour que l'app d√©marre
          Start-Sleep -Seconds 15
          
          # V√©rifier si les processus sont lanc√©s
          $phpProcess = Get-Process | Where-Object { $_.ProcessName -like "*php*" }
          $caddyProcess = Get-Process | Where-Object { $_.ProcessName -like "*caddy*" }
          
          if ($phpProcess) {
            echo "‚úÖ Processus PHP d√©tect√©: $($phpProcess.ProcessName)"
          } else {
            echo "‚ö†Ô∏è  Processus PHP non d√©tect√©"
          }
          
          if ($caddyProcess) {
            echo "‚úÖ Processus Caddy d√©tect√©: $($caddyProcess.ProcessName)"
          } else {
            echo "‚ö†Ô∏è  Processus Caddy non d√©tect√©"
          }
          
          # Tester si le port 8000 r√©pond
          try {
            $response = Invoke-WebRequest -Uri "http://127.0.0.1:8000" -TimeoutSec 5 -UseBasicParsing
            echo "‚úÖ Application r√©pond sur le port 8000"
            echo "   Status: $($response.StatusCode)"
          } catch {
            echo "‚ö†Ô∏è  Application ne r√©pond pas sur le port 8000"
            echo "   Erreur: $_"
          }
          
          # Arr√™ter l'application
          Stop-Process -Id $app.Id -Force
          
          # Nettoyer les processus orphelins
          Get-Process | Where-Object { $_.ProcessName -like "*php*" -or $_.ProcessName -like "*caddy*" } | Stop-Process -Force
        
      - name: Create screenshots
        continue-on-error: true
        run: |
          echo "=== Capture d'√©cran de l'application ==="
          
          # D√©marrer l'application
          $app = Start-Process "dist/win-unpacked/Duplicator.exe" -PassThru
          echo "Application d√©marr√©e avec PID: $($app.Id)"
          
          # Attendre que l'application soit compl√®tement charg√©e
          Start-Sleep -Seconds 20
          
          # Prendre un screenshot avec PowerShell
          Add-Type -AssemblyName System.Windows.Forms
          Add-Type -AssemblyName System.Drawing
          
          $screen = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds
          $bitmap = New-Object System.Drawing.Bitmap $screen.Width, $screen.Height
          $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
          $graphics.CopyFromScreen($screen.Location, [System.Drawing.Point]::Empty, $screen.Size)
          
          $screenshotPath = "screenshot.png"
          $bitmap.Save($screenshotPath, [System.Drawing.Imaging.ImageFormat]::Png)
          
          echo "‚úÖ Screenshot sauvegard√©: $screenshotPath"
          
          # Arr√™ter l'application
          Stop-Process -Id $app.Id -Force
          Get-Process | Where-Object { $_.ProcessName -like "*php*" -or $_.ProcessName -like "*caddy*" } | Stop-Process -Force
          
      - name: Upload screenshot
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: windows-screenshot
          path: screenshot.png
          retention-days: 7
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: duplicator-windows-build
          path: dist/win-unpacked/
          retention-days: 7
        
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: |
            C:\Users\runneradmin\AppData\Local\Temp\duplicator_caddy_errors.log
            C:\Users\runneradmin\AppData\Local\Temp\duplicator_php_errors.log
          retention-days: 3
          if-no-files-found: ignore
        continue-on-error: true
        
      - name: Create GitHub Release
        if: success() && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "=== Cr√©ation de la release GitHub ==="
          
          # V√©rifier les packages disponibles
          echo "Packages disponibles:"
          if (Test-Path "dist/Duplicator-*.exe") {
            echo "‚úÖ Installateur NSIS trouv√©"
            Get-ChildItem "dist/Duplicator-*.exe" | ForEach-Object { echo "  - $($_.Name)" }
          }
          if (Test-Path "dist/Duplicator-*-win.zip") {
            echo "‚úÖ Version portable ZIP trouv√©e"
            Get-ChildItem "dist/Duplicator-*-win.zip" | ForEach-Object { echo "  - $($_.Name)" }
          }
          
          # Obtenir la version depuis Git tags en priorit√©
          $version = $null
          
          # 1. Essayer de r√©cup√©rer le dernier tag Git (m√©thode am√©lior√©e)
          echo "Recherche des tags Git..."
          
          # M√©thode alternative: r√©cup√©rer directement depuis git tag --list
          try {
            $allTags = git tag --list "v*" --sort=-version:refname
            if ($allTags -and $allTags.Length -gt 0) {
              $lastTag = $allTags[0]
              echo "Dernier tag trouv√©: $lastTag"
              
              # Extraire la version sans le 'v' du tag
              $version = $lastTag -replace '^v', ''
              echo "Version depuis Git tag: $lastTag -> $version"
              
              # Calculer la prochaine version (patch incr√©ment√©)
              $versionParts = $version -split '\.'
              if ($versionParts.Length -eq 3) {
                $patch = [int]$versionParts[2] + 1
                $version = "$($versionParts[0]).$($versionParts[1]).$patch"
                echo "‚úÖ Prochaine version calcul√©e: $version"
              } else {
                echo "‚ö†Ô∏è Format de version inattendu: $version"
                $version = $null
              }
            } else {
              echo "‚ö†Ô∏è Aucun tag trouv√© avec 'git tag --list'"
              $version = $null
            }
          } catch {
            echo "‚ùå Erreur lors de la r√©cup√©ration des tags: $($_.Exception.Message)"
            $version = $null
          }
          
          # 2. Fallback: utiliser package.json si aucun tag
          if (-not $version) {
            if (Test-Path "package.json") {
              $packageJson = Get-Content "package.json" | ConvertFrom-Json
              $version = $packageJson.version
              echo "Version depuis package.json: $version"
            }
          }
          
          # 3. Fallback final: version bas√©e sur les commits
          if (-not $version) {
            $commitCount = git rev-list --count HEAD
            $version = "1.0.$commitCount"
            echo "Version depuis commit count: $version"
          }
          
          echo "Version d√©tect√©e: $version"
          
          # V√©rifier si la release existe d√©j√†
          $releaseExists = $false
          try {
            gh release view "v$version" >$null 2>&1
            $releaseExists = $true
            echo "Release v$version existe d√©j√†"
          } catch {
            echo "Release v$version n'existe pas, cr√©ation..."
            $releaseExists = $false
          }
          
          if (-not $releaseExists) {
            # Cr√©er la release
            gh release create "v$version" `
              --title "Duplicator v$version - Windows" `
              --notes "
              üöÄ **Duplicator v$version - Windows Release**
              
              **Corrections:**
              ‚úÖ SQLite extensions ajout√©es (php_sqlite3.dll, php_pdo_sqlite.dll)
              ‚úÖ Visual C++ Runtime DLLs incluses 
              ‚úÖ Application portable Windows pr√™te
              
              **Ressources incluses:**
              üîπ Caddy Web Server v2.7.6
              üîπ PHP ${version}-Windows avec SQLite 
              üîπ Ghostscript pour PDF
              üîπ Extensions PDO SQLite corrig√©es
              
              **Instructions:**
              1. T√©l√©charger le package souhait√© (NSIS installer ou ZIP portable)
              2. Lancer l'application (Duplicator.exe)
              3. L'interface web s'ouvrira automatiquement
              
              **Syst√®me requis:**
              - Windows 10/11 (64-bit)
              ‚ö†Ô∏è Plus besoin d'installer Visual C++ Redistributable !
              
              ---
              *Build automatique depuis GitHub Actions* üèóÔ∏è
              " `
              --generate-notes `
              "dist/Duplicator-*-win.zip" `
              "dist/Duplicator-*.exe" 2>$null || echo "Erreur cr√©ation release"
              
            echo "‚úÖ Release GitHub cr√©√©e: v$version"
          } else {
            echo "‚ÑπÔ∏è Release d√©j√† existante, mise √† jour des assets..."
            
            # Upload des nouveaux assets dans la release existante
            $zipFile = Get-ChildItem "dist/Duplicator-*-win.zip" | Select-Object -First 1
            $exeFile = Get-ChildItem "dist/Duplicator-*.exe" | Select-Object -First 1
            
            if ($zipFile) {
              gh release upload "v$version" $zipFile.FullName --clobber 2>$null || echo "Erreur upload ZIP"
            }
            if ($exeFile) {
              gh release upload "v$version" $exeFile.FullName --clobber 2>$null || echo "Erreur upload EXE" 
            }
            
            echo "‚úÖ Assets mis √† jour dans la release existante"
          }
        
      - name: Test summary
        if: always()
        run: |
          echo ""
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "‚úÖ TEST WINDOWS TERMIN√â"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo ""
          echo "Les artifacts sont disponibles dans l'onglet Actions"
          echo "Vous pouvez t√©l√©charger le build et les logs"

