name: Test macOS Build

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Permet de lancer manuellement

jobs:
  build-and-test-macos:
    runs-on: macos-latest
    timeout-minutes: 30
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
        
      - name: Download Caddy for macOS
        run: |
          echo "T√©l√©chargement de Caddy pour macOS..."
          curl -L -o caddy_macos.tar.gz "https://github.com/caddyserver/caddy/releases/download/v2.7.6/caddy_2.7.6_macOS_amd64.tar.gz"
          echo "Fichier t√©l√©charg√©: $(ls -la caddy_macos.tar.gz)"
          echo "Type de fichier: $(file caddy_macos.tar.gz)"
          tar -xzf caddy_macos.tar.gz
          chmod +x caddy
          rm caddy_macos.tar.gz
          echo "Caddy t√©l√©charg√©: $(ls -la caddy | awk '{print $5}') bytes"
        
      - name: Verify PHP binaries
        run: |
          echo "V√©rification des binaires PHP inclus..."
          
          if [ -f "php/php" ]; then
            echo "‚úÖ php trouv√©"
            ./php/php --version
            echo "Taille: $(stat -f%z php/php) bytes"
          else
            echo "‚ùå php manquant dans le repo"
            echo "Contenu du dossier php/:"
            if [ -d "php" ]; then
              ls -la php/
            else
              echo "Dossier php/ n'existe pas"
            fi
          fi
          
          if [ -f "php/php-fpm" ]; then
            echo "‚úÖ php-fpm trouv√©"
            echo "Taille: $(stat -f%z php/php-fpm) bytes"
          else
            echo "‚ùå php-fpm manquant dans le repo"
          fi
        
      - name: Build application
        run: npm run build:caddy -- --mac
        
      - name: Verify build artifacts
        run: |
          echo "=== V√©rification des artifacts de build ==="
          
          if [ -d "dist" ]; then
            echo "üìÅ Contenu du dossier dist/:"
            ls -la dist/
            
            if [ -d "dist/mac" ]; then
              echo "üìÅ Contenu du dossier dist/mac/:"
              ls -la dist/mac/
            fi
          else
            echo "‚ùå Dossier dist/ manquant"
          fi
          
          # V√©rifier les binaires dans l'app
          if [ -d "dist/mac/Duplicator.app" ]; then
            echo "üì± Structure de l'application:"
            find dist/mac/Duplicator.app -name "*.exe" -o -name "caddy" -o -name "php" | head -10
            
            echo "üîç V√©rification des binaires Caddy et PHP:"
            if [ -f "dist/mac/Duplicator.app/Contents/Resources/app.asar.unpacked/caddy/caddy" ]; then
              echo "‚úÖ Caddy macOS pr√©sent dans l'app"
              ls -la "dist/mac/Duplicator.app/Contents/Resources/app.asar.unpacked/caddy/caddy"
            else
              echo "‚ùå Caddy macOS manquant dans l'app"
            fi
            
            if [ -f "dist/mac/Duplicator.app/Contents/Resources/app.asar.unpacked/php/php" ]; then
              echo "‚úÖ PHP macOS pr√©sent dans l'app"
              ls -la "dist/mac/Duplicator.app/Contents/Resources/app.asar.unpacked/php/php"
            else
              echo "‚ùå PHP macOS manquant dans l'app"
            fi
          fi
          
          # V√©rifier le Caddyfile
          if [ -f "dist/mac/Duplicator.app/Contents/Resources/Caddyfile" ]; then
            echo "‚úÖ Caddyfile pr√©sent"
            echo "Contenu du Caddyfile:"
            cat "dist/mac/Duplicator.app/Contents/Resources/Caddyfile"
          else
            echo "‚ùå Caddyfile manquant"
          fi
          
          # Test de validation si les fichiers existent
          caddyExists=false
          caddyfileExists=false
          
          if [ -f "dist/mac/Duplicator.app/Contents/Resources/app.asar.unpacked/caddy/caddy" ]; then
            caddyExists=true
          fi
          
          if [ -f "dist/mac/Duplicator.app/Contents/Resources/Caddyfile" ]; then
            caddyfileExists=true
          fi
          
          if [ "$caddyExists" = true ] && [ "$caddyfileExists" = true ]; then
            echo "üîß Validation de la configuration Caddy..."
            ./dist/mac/Duplicator.app/Contents/Resources/app.asar.unpacked/caddy/caddy validate --config ./dist/mac/Duplicator.app/Contents/Resources/Caddyfile
          else
            echo "‚ö†Ô∏è  Impossible de valider la configuration Caddy (fichiers manquants)"
            echo "Caddy existe: $caddyExists"
            echo "Caddyfile existe: $caddyfileExists"
          fi
        
      - name: Test application launch (short)
        run: |
          echo "=== Test de d√©marrage de l'application ==="
          
          # D√©marrer l'application
          open dist/mac/Duplicator.app
          echo "Application d√©marr√©e"
          
          # Attendre 15 secondes pour que l'app d√©marre
          sleep 15
          
          # V√©rifier si les processus sont lanc√©s
          phpProcess=$(ps aux | grep -i php | grep -v grep | head -1)
          caddyProcess=$(ps aux | grep -i caddy | grep -v grep | head -1)
          
          if [ -n "$phpProcess" ]; then
            echo "‚úÖ Processus PHP d√©tect√©: $phpProcess"
          else
            echo "‚ö†Ô∏è  Processus PHP non d√©tect√©"
          fi
          
          if [ -n "$caddyProcess" ]; then
            echo "‚úÖ Processus Caddy d√©tect√©: $caddyProcess"
          else
            echo "‚ö†Ô∏è  Processus Caddy non d√©tect√©"
          fi
          
          # Tester si le port 8000 r√©pond
          if curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8000 | grep -q "200"; then
            echo "‚úÖ Application r√©pond sur le port 8000"
          else
            echo "‚ö†Ô∏è  Application ne r√©pond pas sur le port 8000"
          fi
          
          # Arr√™ter l'application
          pkill -f "Duplicator"
          pkill -f "php.*127.0.0.1:8001"
          pkill -f "caddy"
        
      - name: Create screenshots
        continue-on-error: true
        run: |
          echo "=== Capture d'√©cran de l'application ==="
          
          # D√©marrer l'application
          open dist/mac/Duplicator.app
          echo "Application d√©marr√©e"
          
          # Attendre que l'application soit compl√®tement charg√©e
          sleep 20
          
          # Prendre un screenshot avec screencapture (commande macOS native)
          screencapture -x screenshot.png
          
          echo "‚úÖ Screenshot sauvegard√©: screenshot.png"
          
          # Arr√™ter l'application
          pkill -f "Duplicator"
          pkill -f "php.*127.0.0.1:8001"
          pkill -f "caddy"
          
      - name: Upload screenshot
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: macos-screenshot
          path: screenshot.png
          retention-days: 7
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: duplicator-macos-build
          path: dist/mac/
          retention-days: 7
          
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: macos-logs
          path: |
            *.log
            error
          if-no-files-found: ignore
          retention-days: 7
